"@types/bcrypt": "^5.0.1",                 npm install -D @types/bcrypt
"bcrypt": "^5.1.1",                       npm install bcrypt
 "prisma": "^5.5.0"











steps of install prisma :


1- install prisma it self      ========>  npm i -D prisma
2- make init for it            =======>  npx prisma init
3- write my model and connect it with my database type like mongodb 
4-make push for database collection    ======> npx prisma db push
5- begin to make authentication     ======> npm install @prisma/client @next-auth/prisma-adapter@canary
6- install the bcrypt to encyrpt password   ===> 
7- make a prisma client   in[ libs=> prismadb.ts]
8-make providers in [pages => api => [...nextauth].ts ]
9- make the api for ex: register api in [api ==> register ==> route.ts ]

10- to load the data for the user form the prisma look for [ actions ==> getCurrentUser.ts]






import { PrismaAdapter } from "@next-auth/prisma-adapter";
import { AuthOptions } from "next-auth"
import prisma from "@/app/libs/prismadb";
import GithubProvider from "next-auth/providers/github";
import GoogleProvider from "next-auth/providers/google";
import CredentialsProvider   from "next-auth/providers/credentials";
import bcrypt from "bcrypt";
import NextAuth from "next-auth";

export const authOptions:AuthOptions={
    adapter:PrismaAdapter(prisma),
    providers: [
        GoogleProvider({
          clientId: process.env.GOOGLE_CLIENT_ID as string,
          clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,
        }),
        GithubProvider({
          clientId: process.env.GITHUB_ID as string,
          clientSecret: process.env.GITHUB_SECRET as string,
        }),
        CredentialsProvider({
            name:'credentials',
            credentials :{
                email:{label: 'email',type:"text"},
                password:{label: 'password',type:"password"},
            },
            async authorize(credentials){
                if(!credentials?.email || !credentials?.password){
                    throw new Error('Invalid credentials');
                }
                const user = await prisma?.user.findUnique({
                    where:{
                        email:credentials.email
                    }
                });
                if(!user || !user?.hashedPassword){
                    throw new Error('Invalid credentials');
                }
                const isCorrectPassword = await bcrypt.compare(credentials.password , user.hashedPassword);
                if(!isCorrectPassword){
                    throw new Error('Invalid credentials');
                }
                return user;
            }
        })
    ],
    pages:{
        signIn:'/',
    },
    debug:process.env.NODE_ENV === 'development',
    session:{
        strategy: "jwt"
    },
    secret: process.env.NEXTAUTH_SECRET,
};

export default NextAuth(authOptions)